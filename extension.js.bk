/* extension.js
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * SPDX-License-Identifier: GPL-2.0-or-later
 */

/* exported init */

//class Extension {
//    constructor() {
//    }
//    enable() {
//    }
//    disable() {
//    }
//}

//function init() {
//    return new Extension();
//}

// Example#9

const {Gio, Shell, Meta} = imports.gi;
const Main = imports.ui.main;
const Me = imports.misc.extensionUtils.getCurrentExtension();

function getSettings () {
  let GioSSS = Gio.SettingsSchemaSource;
  let schemaSource = GioSSS.new_from_directory(
    Me.dir.get_child("schemas").get_path(),
    GioSSS.get_default(),
    false
  );
  let schemaObj = schemaSource.lookup(
    'org.gnome.shell.extensions.insertnewworkspace', true);
  if (!schemaObj) {
    throw new Error('cannot find schemas');
  }
  return new Gio.Settings({ settings_schema : schemaObj });
}

function init () {}

function enable () {
  log('LOGGER: InsertNewWorkspace is enabled.');

  // Shell.ActionMode.NORMAL
  // Shell.ActionMode.OVERVIEW
  // Shell.ActionMode.LOCK_SCREEN
  // Shell.ActionMode.ALL
  let mode = Shell.ActionMode.ALL;

  // Meta.KeyBindingFlags.NONE
  // Meta.KeyBindingFlags.PER_WINDOW
  // Meta.KeyBindingFlags.BUILTIN
  // Meta.KeyBindingFlags.IGNORE_AUTOREPEAT
  let flag = Meta.KeyBindingFlags.NONE;

  let settings = getSettings();

  Main.wm.addKeybinding("inw-shortcut", settings, flag, mode, () => {
    log('shortcut is working');
  });
}

function disable () {
  Main.wm.removeKeybinding("inw-shortcut");
  log('LOGGER: InsertNewWorkspace is disabled.');
  
}


// const workspaceManager = global;
// const newIndex = workspaceManager.get_active_workspace_index() + 1;

// function insertNewWs (){
//   Main.wm.insertWorkspace(newIndex);

//   const newWs = workspaceManager.get_workspace_by_index(newIndex);
//   Main.wm.actionMoveWindow(newWs, window);
// }


  //const winManager = global.window_manager;
  //const myWin = global.get_window_actors()[0].meta_window;
  //const myWin = myWins.get_meta_window();
  //const myWin = global.gettheMetaWindow;
  //const myWin = app.get_windows();
  //myWin[0].change_workspace_by_index(newIndex, false);
  //Meta.Window.change_workspace_by_index(newIndex, false);
  //const mywin = global.window_manager.get_default();
  //const mywin = Shell.WindowTracker.get_default();
  //Shell.WM.change_workspace_by_index(newIndex, false);
  //Main.wm.change_workspace_by_index(newIndex, false);
  //Meta.Window.change_workspace_by_index(newIndex, false);
  //const winManager = global.window_manager;
  //winManager::switch-workspace(object, p0, p1);// how do i use a Signal?s
  //Meta.Window.change_workspace_by_index(newIndex, false);
  //Meta.Window.moveWindow(newIndex);
  
  // Shell.wm.moveWindow
  //Main.wm.change_workspace_by_index(newIndex, false);
  //const newWS = workspaceManager.get_workspace_by_index(newIndex);
  //const myWindow = Meta.display.get_focus_window();
  //const myWindow = Shell.WindowTracker.get_default();
  //log(objToString(myWindow))
  //log(JSON.stringify(window))
  //Main.wm.actionMoveWindow(newWS, window); //swapped from window
  //window.change_workspace_by_index(newIndex, false);
  //mywin.moveWindow(newIndex)